	

__kernel void radon_my_variable_type(__global my_variable_type *sino, __global my_variable_type *img,
					__constant my_variable_type8 *ofs, __global my_variable_type* Geometryinformation
					//const int X,
					//const int Y
					)
{
   size_t I = get_global_size(0);
   size_t J = get_global_size(1); 

  size_t i = get_global_id(0);
  size_t j = get_global_id(1);
  size_t thirddim = get_global_id(2);
  
  const int X= Geometryinformation[2];
  const int Y= Geometryinformation[3];
  
  const float delta_x= Geometryinformation[0];
  const float delta_xi= Geometryinformation[1];
  int ii=i;
  my_variable_type4 o = ofs[j].s0123;
  my_variable_type acc = 0.0f;
  img+=X*Y*thirddim;
  for(int y = 0; y < Y; y++) {
	int x_low, x_high;
	my_variable_type d = y*o.y + o.z;

	// compute bounds
	if (o.x == 0) {
	  if ((d > ii-1) && (d < ii+1)) {
		x_low = 0; x_high = X-1;
	  } else {
		img += X; continue;
	  }
	} else if (o.x > 0) {
	  x_low = (int)((ii-1 - d)*o.w);
	  x_high = (int)((ii+1 - d)*o.w);
	} else {
	  x_low = (int)((ii+1 - d)*o.w);
	  x_high = (int)((ii-1 - d)*o.w);
	}
	x_low = max(x_low, 0);
	x_high = min(x_high, X-1);

	// integrate
	for(int x = x_low; x <= x_high; x++) {
	  my_variable_type weight = 1.0 - fabs(x*o.x + d - ii);
	  if (weight > 0.0f) acc += weight*img[x];
	}
	img += X;
  }
  sino[j*I + i+I*J*thirddim] = acc*delta_x*delta_x/delta_xi;
}

__kernel void radon_ad_my_variable_type(__global my_variable_type *img, __global my_variable_type *sino,
					   __constant my_variable_type8 *ofs, 
					   __global my_variable_type* Geometryinformation
					   //const int I,const int J
					   )
{
  size_t X = get_global_size(0);
	size_t Y = get_global_size(1);
  
  size_t x = get_global_id(0);
  size_t y = get_global_id(1);
  size_t thirddim = get_global_id(2);
  
  const int I = Geometryinformation[4];
  const int J = Geometryinformation[5];

  my_variable_type4 c = (my_variable_type4)(x,y,1,0);
  my_variable_type acc = 0.0f;
  sino += I*J*thirddim;
  
  for (int j=0; j < J; j++) {
    my_variable_type Delta_phi=ofs[j].s4;
	my_variable_type i = dot(c, ofs[j].s0123);
	if ((i > -1) && (i < I)) {
	  my_variable_type i_floor;
	  my_variable_type p = fract(i, &i_floor);
	  if (i_floor >= 0)	  acc += Delta_phi*(1.0f - p)*sino[(int)i_floor];
	  if (i_floor <= I-2) acc += Delta_phi*p*sino[(int)(i_floor+1)];
	}
 	sino += I;
  }
  img[y*X + x+X*Y*thirddim] = acc;
}



